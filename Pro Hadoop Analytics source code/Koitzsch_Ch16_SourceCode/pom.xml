<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<prerequisites>
		<maven>3.0.5</maven>
	</prerequisites>

	<groupId>com.apress</groupId>
	<artifactId>probda</artifactId>
	<version>0.1</version>

	<properties>
		<beam.version>0.4.0-incubating-SNAPSHOT</beam.version>
		<pentaho.mondrian.version>3.6.0</pentaho.mondrian.version>
		<pentaho.platform.extensions.version>5.0.3</pentaho.platform.extensions.version>
		<kudu.parent.version>1.0.0</kudu.parent.version>
		<solr.core.version>8.4.0</solr.core.version>
		<spring.neo4j.version>4.1.6.RELEASE</spring.neo4j.version>
		<spring.elasticsearch.version>2.0.5.RELEASE</spring.elasticsearch.version>
		<nd4j.backend>nd4j-native</nd4j.backend>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.build.java.version>1.8</project.build.java.version>
		<openimaj.version>1.3.5</openimaj.version>
		<commons.math.version>3.2</commons.math.version>
		<shadedClassifier>bin</shadedClassifier>
		<drools.core.version>6.2.0.Final</drools.core.version>
		<spring.integration.version>4.3.6.RELEASE</spring.integration.version>
		<java.version>1.7</java.version>
		<junit.version>4.11</junit.version>
		<nd4j.version>0.4-rc3.10</nd4j.version>
		<dl4j.version>0.4-rc3.10</dl4j.version>
		<canova.version>0.0.0.16</canova.version>
		<arbiter.version>0.0.0.7</arbiter.version>
		<guava.version>19.0</guava.version>
		<spring.kafka.version>1.1.1.RELEASE</spring.kafka.version>
		<jfreechart.version>1.0.13</jfreechart.version>
		<maven-shade-plugin.version>2.4.3</maven-shade-plugin.version>
		<exec-maven-plugin.version>1.4.0</exec-maven-plugin.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<encoding>UTF-8</encoding>
		<hamcrest.version>1.3</hamcrest.version>
		<scala.tools.version>2.10</scala.tools.version>
		<scala.version>2.10.4</scala.version>
	</properties>

	<repositories>
	
		<repository>
			<id>com.springsource.repository.bundles.external</id>
			<name>SpringSource Enterprise Bundle Repository - External Bundle Releases</name>
			<url>http://repository.springsource.com/maven/bundles/external</url>
		</repository>
		<!-- Chapter 3 Pentaho dependencies for OLAP -->
		<repository>
			<id>pentaho-releases</id>
			<url>http://repository.pentaho.org/artifactory/repo</url>
		</repository>
		<repository>
			<id>apache.snapshots</id>
			<name>Apache Development Snapshot Repository</name>
			<url>https://repository.apache.org/content/repositories/snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>snapshots-repo</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>cdh.repo</id>
			<url>https://repository.cloudera.com/artifactory/cloudera-repos</url>
			<name>Cloudera Repositories</name>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>JBossRepo</id>
			<url>http://repository.jboss.com/maven2/</url>
		</repository>
	</repositories>

	<distributionManagement>
		<snapshotRepository>
			<id>sonatype-nexus-snapshots</id>
			<name>Sonatype Nexus snapshot repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>nexus-releases</id>
			<name>Nexus Release Repository</name>
			<url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.drools</groupId>
				<artifactId>drools-bom</artifactId>
				<type>pom</type>
				<version>6.2.0.Final</version>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.nd4j</groupId>
				<artifactId>nd4j-native</artifactId>
				<version>${nd4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.nd4j</groupId>
				<artifactId>nd4j-cuda-7.5</artifactId>
				<version>${nd4j.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<parallel>all</parallel>
					<threadCount>4</threadCount>
					<redirectTestOutputToFile>true</redirectTestOutputToFile>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>2.19.1</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.4.0</version>
					<configuration>
						<cleanupDaemonThreads>false</cleanupDaemonThreads>
					</configuration>
				</plugin>

				<!-- Configures `mvn package` to produce a bundled jar ("fat jar") for 
					runners that require this for job submission to a cluster. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>2.4.1</version>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>shade</goal>
							</goals>
							<configuration>
								<finalName>${project.artifactId}-bundled-${project.version}</finalName>
								<filters>
									<filter>
										<artifact>*:*</artifact>
										<excludes>
											<exclude>META-INF/LICENSE</exclude>
											<exclude>META-INF/*.SF</exclude>
											<exclude>META-INF/*.DSA</exclude>
											<exclude>META-INF/*.RSA</exclude>
										</excludes>
									</filter>
								</filters>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<!-- <plugin> <artifactId>maven-assembly-plugin</artifactId> <version>2.2.1</version> 
					<configuration> <finalName>ACMMM-Presentation</finalName> <appendAssemblyId>false</appendAssemblyId> 
					<descriptorRefs> <descriptorRef>jar-with-dependencies</descriptorRef> </descriptorRefs> 
					<archive> <index>true</index> <manifest> <addDefaultImplementationEntries>true</addDefaultImplementationEntries> 
					<mainClass>org.openimaj.demos.acmmm11.presentation.OpenIMAJ_ACMMM2011</mainClass> 
					</manifest> </archive> </configuration> <executions> <execution> <id>make-my-applet-jar</id> 
					<phase>package</phase> <goals> <goal>single</goal> </goals> </execution> 
					</executions> </plugin> -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jarsigner-plugin</artifactId>
					<version>1.2</version>
					<executions>
						<execution>
							<id>sign</id>
							<goals>
								<goal>sign</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<keystore>src/main/keystore/signing.keystore</keystore>
						<alias>openimaj</alias>
						<storepass>0pen1MAJ</storepass>
						<keypass>0pen1MAJ</keypass>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.mycila.maven-license-plugin</groupId>
					<artifactId>maven-license-plugin</artifactId>
					<version>1.9.0</version>
					<configuration>
						<header>src/etc/header.txt</header>
						<strictCheck>true</strictCheck>
						<properties>
							<year>${project.inceptionYear}</year>
						</properties>
						<excludes>
							<exclude>AUTHORS</exclude>
							<exclude>COPYING</exclude>
							<exclude>globalfeatures</exclude>
							<exclude>pairwisecomp</exclude>
							<exclude>README</exclude>
							<exclude>parallelExecutor</exclude>
							<exclude>segmenting_globalfeatures</exclude>
							<exclude>segmenting_pairwisecomp</exclude>
						</excludes>
						<mapping>
							<jtemp>JAVADOC_STYLE</jtemp>
						</mapping>
						<useDefaultMapping>true</useDefaultMapping>
					</configuration>
				</plugin>
				<plugin>
					<groupId>net.alchim31.maven</groupId>
					<artifactId>scala-maven-plugin</artifactId>
					<version>3.1.3</version>
					<executions>
						<execution>
							<goals>
								<goal>compile</goal>
							</goals>
							<configuration>
								<args>
									<arg>-make:transitive</arg>
									<arg>-dependencyfile</arg>
									<arg>${project.build.directory}/.scala_dependencies</arg>
								</args>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.2.1</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.5</version>
					<executions>
						<execution>
							<id>copy-resources</id>
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/jnlp/</directory>
										<filtering>true</filtering>
									</resource>
									<resource>
										<directory>src/main/html/</directory>
										<filtering>true</filtering>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>direct-runner</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<!-- Makes the DirectRunner available when running a pipeline. -->
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-direct-java</artifactId>
					<version>${beam.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<id>apex-runner</id>
			<!-- Makes the ApexRunner available when running a pipeline. -->
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-apex</artifactId>
					<version>${beam.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<id>dataflow-runner</id>
			<!-- Makes the DataflowRunner available when running a pipeline. -->
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-google-cloud-dataflow-java</artifactId>
					<version>${beam.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<id>flink-runner</id>
			<!-- Makes the FlinkRunner available when running a pipeline. -->
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-flink_2.10</artifactId>
					<version>${beam.version}</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>spark-runner</id>
			<!-- Makes the SparkRunner available when running a pipeline. Additionally, 
				overrides some Spark dependencies to Beam-compatible versions. -->
			<dependencies>
				<dependency>
					<groupId>org.apache.beam</groupId>
					<artifactId>beam-runners-spark</artifactId>
					<version>${beam.version}</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.spark</groupId>
					<artifactId>spark-streaming_2.10</artifactId>
					<version>1.6.2</version>
					<scope>runtime</scope>
					<exclusions>
						<exclusion>
							<groupId>org.slf4j</groupId>
							<artifactId>jul-to-slf4j</artifactId>
						</exclusion>
					</exclusions>
				</dependency>
				<dependency>
					<groupId>com.fasterxml.jackson.module</groupId>
					<artifactId>jackson-module-scala_2.10</artifactId>
					<version>2.7.2</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>pentaho</groupId>
			<artifactId>mondrian</artifactId>
			<version>${pentaho.mondrian.version}</version>
		</dependency>
		<dependency>
			<groupId>pentaho-reporting-engine</groupId>
			<artifactId>pentaho-reporting-engine-classic-core</artifactId>
			<version>7.0.0.1-37</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.xbean/xbean-spring -->
<!--  
<dependency>
    <groupId>org.apache.xbean</groupId>
    <artifactId>xbean-spring</artifactId>
    <version>4.5</version>
</dependency>
-->
<!-- https://mvnrepository.com/artifact/org.apache.xbean/xbean -->
<!--  
<dependency>
    <groupId>org.apache.xbean</groupId>
    <artifactId>xbean</artifactId>
    <version>2.5</version>
</dependency>
-->
		<!-- https://mvnrepository.com/artifact/jfree/jfreereport -->
		<!--  
		 <dependency>
            <groupId>pentaho</groupId>
            <artifactId>pentaho-platform-extensions</artifactId>
            <version>${pentaho.platform.extensions.version}</version>
        </dependency>
        -->
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-core</artifactId>
			<version>${spring.integration.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.storm/apache-storm-bin -->
		<dependency>
			<groupId>org.apache.storm</groupId>
			<artifactId>storm-core</artifactId>
			<version>1.0.0</version>
			<scope>provided</scope>
		</dependency>
		<!-- Adds a dependency on the Beam SDK. -->
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-core</artifactId>
			<version>${beam.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-core</artifactId>
			<version>1.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.mrunit</groupId>
			<artifactId>mrunit</artifactId>
			<version>0.9.0-incubating</version>
			<classifier>hadoop1</classifier>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-math3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>${commons.math.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-hadoop -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-hadoop</artifactId>
			<version>1.0.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lens</groupId>
			<artifactId>lens-driver-hive</artifactId>
			<version>2.6.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.lens/lens-api -->
		<dependency>
			<groupId>org.apache.lens</groupId>
			<artifactId>lens-api</artifactId>
			<version>2.6.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/net.opentsdb/opentsdb -->
		<dependency>
			<groupId>net.opentsdb</groupId>
			<artifactId>opentsdb</artifactId>
			<version>2.3.0-RC2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/edu.umn.cs.spatialhadoop/spatialhadoop -->
		<dependency>
			<groupId>edu.umn.cs.spatialhadoop</groupId>
			<artifactId>spatialhadoop</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
			<version>${spring.kafka.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.drools/drools-core -->
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-core</artifactId>
			<version>${drools.core.version}</version>
		</dependency>
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-compiler</artifactId>
			<version>5.5.0.Final</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<version>2.5.16</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.github.jai-imageio/jai-imageio-core -->
		<dependency>
			<groupId>com.github.jai-imageio</groupId>
			<artifactId>jai-imageio-core</artifactId>
			<version>1.3.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.twelvemonkeys.imageio/imageio-core -->
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-core</artifactId>
			<version>3.3.1</version>
		</dependency>
		<dependency>
			<groupId>org.mvel</groupId>
			<artifactId>mvel2</artifactId>
			<version>2.1.3.Final</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.cassandra/cassandra-all -->
		<dependency>
			<groupId>org.apache.cassandra</groupId>
			<artifactId>cassandra-all</artifactId>
			<version>3.9</version>
		</dependency>
		<dependency>
			<groupId>net.sf.opencsv</groupId>
			<artifactId>opencsv</artifactId>
			<version>2.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.solr/solr-core -->
		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-core</artifactId>
			<version>${solr.core.version}</version>
		</dependency>
		<!-- Chapter 3 Apache Kylin dependency -->
		<dependency>
			<groupId>org.apache.kylin</groupId>
			<artifactId>kylin-engine-streaming</artifactId>
			<version>1.5.4.1</version>
		</dependency>
		<dependency>
			<groupId>org.openimaj.content</groupId>
			<artifactId>slideshow</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>image-local-features</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>demos</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>faces</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>image-feature-extraction</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>core-video-capture</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>xuggle-video</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>klt-tracker</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>audio-processing</artifactId>
			<version>${openimaj.version}</version>
			<scope>compile</scope>
		</dependency>
		<!-- Adds a dependency on the Beam Google Cloud Platform IO module. -->
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-sdks-java-io-google-cloud-platform</artifactId>
			<version>${beam.version}</version>
		</dependency>
		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kie-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-core</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-elasticsearch -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-elasticsearch</artifactId>
			<version>${spring.elasticsearch.version}</version>
		</dependency>
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-compiler</artifactId>
		</dependency>
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-decisiontables</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>${scala.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-streaming_2.10</artifactId>
			<version>1.3.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-sql_2.10</artifactId>
			<version>1.3.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.3.1</version>
		</dependency>
		<dependency>
			<groupId>com.cloudera</groupId>
			<artifactId>spark-hbase</artifactId>
			<version>0.0.2-clabs</version>
		</dependency>
		<dependency>
			<groupId>org.skife.com.typesafe.config</groupId>
			<artifactId>typesafe-config</artifactId>
			<version>0.3.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.hbase</groupId>
			<artifactId>hbase-client</artifactId>
			<version>1.0.0-cdh5.4.5</version>
			<exclusions>
				<exclusion>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>jetty</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>jetty-util</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>jsp-2.1</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>jsp-api-2.1</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>servlet-api-2.1</artifactId>
				</exclusion>
				<exclusion>
					<groupId>tomcat</groupId>
					<artifactId>jasper-compiler</artifactId>
				</exclusion>
				<exclusion>
					<groupId>tomcat</groupId>
					<artifactId>jasper-runtime</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Dependencies below this line are specific dependencies needed by the 
			examples code. -->
		<dependency>
			<groupId>com.google.api-client</groupId>
			<artifactId>google-api-client</artifactId>
			<version>1.22.0</version>
			<exclusions>
				<!-- Exclude an old version of guava that is being pulled in by a transitive 
					dependency of google-api-client -->
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava-jdk5</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.google.apis</groupId>
			<artifactId>google-api-services-bigquery</artifactId>
			<version>v2-rev295-1.22.0</version>
			<exclusions>
				<!-- Exclude an old version of guava that is being pulled in by a transitive 
					dependency of google-api-client -->
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava-jdk5</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.google.http-client</groupId>
			<artifactId>google-http-client</artifactId>
			<version>1.22.0</version>
			<exclusions>
				<!-- Exclude an old version of guava that is being pulled in by a transitive 
					dependency of google-api-client -->
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava-jdk5</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.google.apis</groupId>
			<artifactId>google-api-services-pubsub</artifactId>
			<version>v1-rev10-1.22.0</version>
			<exclusions>
				<!-- Exclude an old version of guava that is being pulled in by a transitive 
					dependency of google-api-client -->
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava-jdk5</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.tika/tika-core -->
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-core</artifactId>
			<version>1.13</version>
		</dependency>
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-nlp</artifactId>
			<version>${dl4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-core</artifactId>
			<version>${dl4j.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.media.jai</groupId>
			<artifactId>com.springsource.javax.media.jai.core</artifactId>
			<version>1.1.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.media/jai_core -->
		<!-- <dependency> <groupId>javax.media</groupId> <artifactId>jai_core</artifactId> 
			<version>1.1.3</version> </dependency> -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-ui</artifactId>
			<version>${dl4j.version}</version>
		</dependency>
		<!-- <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> 
			<version>${guava.version}</version> </dependency> -->
		<dependency>
			<groupId>org.nd4j</groupId>
			<artifactId>${nd4j.backend}</artifactId>
		</dependency>
		<dependency>
			<artifactId>canova-nd4j-image</artifactId>
			<groupId>org.nd4j</groupId>
			<version>${canova.version}</version>
		</dependency>
		<dependency>
			<artifactId>canova-nd4j-codec</artifactId>
			<groupId>org.nd4j</groupId>
			<version>${canova.version}</version>
		</dependency>
		<!-- Used in the RegressionMathFunctions example -->
		<dependency>
			<groupId>jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>${jfreechart.version}</version>
		</dependency>

		<!-- Arbiter: used for hyperparameter optimization examples -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>arbiter-deeplearning4j</artifactId>
			<version>${arbiter.version}</version>
		</dependency>

		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.4</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>19.0</version>
		</dependency>

		<!-- Add slf4j API frontend binding with JUL backend -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.14</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>1.7.14</version>
			<!-- When loaded at runtime this will wire up slf4j to the JUL backend -->
			<scope>runtime</scope>
		</dependency>

		<!-- Hamcrest and JUnit are required dependencies of PAssert, which is 
			used in the main code of DebuggingWordCount example. -->

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>${hamcrest.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-neo4j</artifactId>
			<version>${spring.neo4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.neo4j.driver</groupId>
			<artifactId>neo4j-java-driver</artifactId>
			<version>1.0.6</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
		</dependency>

		<!-- The DirectRunner is needed for unit tests. -->
		<dependency>
			<groupId>org.apache.beam</groupId>
			<artifactId>beam-runners-direct-java</artifactId>
			<version>${beam.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>
